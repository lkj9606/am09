body{
    width: 200px; margin: 200px auto;
}
div{
    width: 200px;
}
div span{
    width: 200px; height: 200px; display: block;
    animation-iteration-count: infinite;
    animation-duration: 3s;
    animation-timing-function: ease;
    transform-style: preserve-3d;
}
div.rotater span:first-of-type{
    background-color: red;
    animation-name: hori;
}
@keyframes hori{
    from{
        transform: rotateX(0deg);
    }to{
        transform: rotateX(360deg);
    }
}

div.rotater span:nth-of-type(2){
    background-color: blue; color: white;
    animation-name: verti;
}
@keyframes verti{
    from{
        transform: rotateY(0deg);
    }to{
        transform: rotateY(360deg);
    }
}
div.rotater span:nth-of-type(3){
    background-color: yellow;
    animation-name: depth;
}
@keyframes depth{
    from{
        transform: rotateZ(0deg);
    }to{
        transform: rotateZ(360deg);
    }
}
div.rotater span:last-of-type{
    background-color: green;
    animation-name: rotate3D;
}
@keyframes rotate3D{
    from{
        transform: rotate3d(0,0,0, 0deg);
    }to{
        transform: rotate3d(1,1,1, 360deg);
    }
}
/*
 rotate3D(x좌표, y좌표, z좌표, 회전각도);
 3개의 축을 동시 운용 할 경우(3D) 각 축의 기준점을 기재하면, 좌표가
 생성된다. 그래서 그 해당 좌표를 기준으로 3d로 회전을 하게 됨.
 만약 3개축이 모두 0일 경우 모든 축이 한점에 모이기 때문에 구현불가.
*/

div.translater span{
    background-color: brown; color: white;
    animation-name: trans3D;
}
@keyframes trans3D{
    from{
        transform: rotate3d(0, 0, 0, 0deg) translate3d(0px, 0px, 0px) scale3d(0, 0, 0);
    }to{
        transform: rotate3d(1, 1, 1, 360deg) translate3d(100px, 300px, 150px) scale3d(1, 1, 1.5);
    }
}